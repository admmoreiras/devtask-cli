// Manipulador para opera√ß√µes relacionadas a c√≥digo
import dotenv from "dotenv";
import OpenAI from "openai";
import { isPathSafe, readFile } from "../../utils/file-explorer.js";
import { Intent } from "../intent-processor.js";
import { BaseHandler } from "./handler-interface.js";

dotenv.config();

// Cliente OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Manipulador para inten√ß√µes relacionadas a c√≥digo
 */
export class CodeHandler extends BaseHandler {
  // A√ß√µes suportadas por este manipulador
  private supportedActions = [
    "explain", // Explicar um trecho de c√≥digo
    "generate", // Gerar c√≥digo
    "execute", // Executar c√≥digo
    "refactor", // Refatorar c√≥digo
    "analyze", // Analisar c√≥digo
  ];

  /**
   * Processa uma inten√ß√£o relacionada a c√≥digo
   * @param intent Inten√ß√£o a ser processada
   * @returns Resposta do manipulador
   */
  async handle(intent: Intent): Promise<string> {
    // Verificar se a a√ß√£o √© suportada
    if (!this.isActionSupported(intent.action, this.supportedActions)) {
      return this.getUnsupportedActionResponse(intent);
    }

    // Processar a a√ß√£o
    try {
      switch (intent.action) {
        case "explain":
          return await this.handleExplain(intent);

        case "generate":
          return await this.handleGenerate(intent);

        case "execute":
          return await this.handleExecute(intent);

        case "refactor":
          return await this.handleRefactor(intent);

        case "analyze":
          return await this.handleAnalyze(intent);

        default:
          return `Opera√ß√£o de c√≥digo n√£o implementada: ${intent.action}`;
      }
    } catch (error: any) {
      return `Erro ao processar opera√ß√£o de c√≥digo: ${error.message}`;
    }
  }

  /**
   * Processa a a√ß√£o de explicar c√≥digo
   */
  private async handleExplain(intent: Intent): Promise<string> {
    let filePath = intent.parameters.path;
    let code = intent.parameters.code;

    // Se o c√≥digo n√£o foi fornecido diretamente e n√£o temos um caminho,
    // verificar se temos um arquivo no contexto
    if (!code && !filePath) {
      const currentFile = this.contextManager.getCurrentFile();
      if (currentFile) {
        filePath = currentFile;
      } else {
        return "Por favor, especifique qual c√≥digo voc√™ gostaria que eu explicasse. Voc√™ pode fornecer o c√≥digo diretamente ou o caminho para um arquivo.";
      }
    }

    // Se temos um caminho, ler o arquivo
    if (filePath && !code) {
      if (!isPathSafe(filePath)) {
        return `‚ö†Ô∏è Acesso negado. O arquivo "${filePath}" √© sens√≠vel ou est√° fora do projeto.`;
      }

      try {
        code = await readFile(filePath);
        if (code === null) {
          return `N√£o consegui encontrar ou ler o arquivo "${filePath}". Por favor, verifique se o caminho est√° correto.`;
        }
      } catch (error: any) {
        return `N√£o foi poss√≠vel ler o arquivo "${filePath}": ${error.message}`;
      }
    }

    if (!code) {
      return "N√£o consegui identificar o c√≥digo a ser explicado. Por favor, forne√ßa o c√≥digo ou especifique um arquivo v√°lido.";
    }

    // Atualizar o estado com a opera√ß√£o atual
    this.contextManager.updateState({
      type: "code",
      action: "explain",
      parameters: { path: filePath },
      originalMessage: "",
    });

    // Preparar a explica√ß√£o do c√≥digo usando a API OpenAI
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4.1",
        messages: [
          {
            role: "system",
            content:
              "Voc√™ √© um assistente especializado em explicar c√≥digo. " +
              "Forne√ßa explica√ß√µes concisas, diretas e t√©cnicas, focando na funcionalidade principal. " +
              "Mencione padr√µes de design relevantes, bibliotecas utilizadas e qualquer detalhe importante de implementa√ß√£o. " +
              "Seja objetivo e evite explica√ß√µes desnecessariamente longas. Use linguagem t√©cnica apropriada para desenvolvedores.",
          },
          {
            role: "user",
            content: `Explique o seguinte c√≥digo de forma clara e concisa:\n\n\`\`\`\n${code}\n\`\`\``,
          },
        ],
        temperature: 0.3,
        max_tokens: 1500,
      });

      return `üìù **Explica√ß√£o do c√≥digo${filePath ? ` em "${filePath}"` : ""}**:\n\n${
        response.choices[0].message.content
      }`;
    } catch (error: any) {
      console.error("Erro ao explicar c√≥digo:", error);
      return `Ocorreu um erro ao explicar o c√≥digo: ${error.message}`;
    }
  }

  /**
   * Processa a a√ß√£o de gerar c√≥digo
   */
  private async handleGenerate(intent: Intent): Promise<string> {
    const type = intent.parameters.type || "generic";
    const description = intent.parameters.description || intent.originalMessage;

    if (!description) {
      return "Por favor, forne√ßa uma descri√ß√£o do c√≥digo que voc√™ gostaria que eu gerasse.";
    }

    // Atualizar o estado com a opera√ß√£o atual
    this.contextManager.updateState({
      type: "code",
      action: "generate",
      parameters: { type, description },
      originalMessage: "",
    });

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4.1",
        messages: [
          {
            role: "system",
            content:
              "Voc√™ √© um assistente especializado em gerar c√≥digo de alta qualidade. " +
              "Crie c√≥digo que seja eficiente, bem estruturado e siga as melhores pr√°ticas. " +
              "Inclua coment√°rios relevantes explicando partes complexas. " +
              "Se poss√≠vel, forne√ßa uma explica√ß√£o breve sobre como o c√≥digo funciona ap√≥s ger√°-lo.",
          },
          {
            role: "user",
            content: `Gere ${type !== "generic" ? `um ${type}` : "c√≥digo"} que: ${description}`,
          },
        ],
        temperature: 0.2,
        max_tokens: 1500,
      });

      return `üß© **C√≥digo Gerado**:\n\n${response.choices[0].message.content}`;
    } catch (error: any) {
      console.error("Erro ao gerar c√≥digo:", error);
      return `Ocorreu um erro ao gerar o c√≥digo: ${error.message}`;
    }
  }

  /**
   * Processo a a√ß√£o de executar c√≥digo (n√£o implementado)
   */
  private async handleExecute(intent: Intent): Promise<string> {
    return "A execu√ß√£o direta de c√≥digo n√£o est√° dispon√≠vel no momento. Considere usar a funcionalidade de modifica√ß√£o de arquivos e executar o c√≥digo manualmente.";
  }

  /**
   * Processa a a√ß√£o de refatorar c√≥digo
   */
  private async handleRefactor(intent: Intent): Promise<string> {
    let filePath = intent.parameters.path;
    let code = intent.parameters.code;
    const instructions =
      intent.parameters.instructions || "Refatore o c√≥digo para melhorar a legibilidade e efici√™ncia.";

    // Se o c√≥digo n√£o foi fornecido diretamente e n√£o temos um caminho,
    // verificar se temos um arquivo no contexto
    if (!code && !filePath) {
      const currentFile = this.contextManager.getCurrentFile();
      if (currentFile) {
        filePath = currentFile;
      } else {
        return "Por favor, especifique qual c√≥digo voc√™ gostaria que eu refatorasse. Voc√™ pode fornecer o c√≥digo diretamente ou o caminho para um arquivo.";
      }
    }

    // Se temos um caminho, ler o arquivo
    if (filePath && !code) {
      if (!isPathSafe(filePath)) {
        return `‚ö†Ô∏è Acesso negado. O arquivo "${filePath}" √© sens√≠vel ou est√° fora do projeto.`;
      }

      try {
        code = await readFile(filePath);
        if (code === null) {
          return `N√£o consegui encontrar ou ler o arquivo "${filePath}". Por favor, verifique se o caminho est√° correto.`;
        }
      } catch (error: any) {
        return `N√£o foi poss√≠vel ler o arquivo "${filePath}": ${error.message}`;
      }
    }

    if (!code) {
      return "N√£o consegui identificar o c√≥digo a ser refatorado. Por favor, forne√ßa o c√≥digo ou especifique um arquivo v√°lido.";
    }

    // Atualizar o estado com a opera√ß√£o atual
    this.contextManager.updateState({
      type: "code",
      action: "refactor",
      parameters: { path: filePath },
      originalMessage: "",
    });

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4.1",
        messages: [
          {
            role: "system",
            content:
              "Voc√™ √© um assistente especializado em refatorar c√≥digo. " +
              "Melhore a qualidade do c√≥digo sem alterar sua funcionalidade. " +
              "Foque em melhorar a legibilidade, eliminar c√≥digo duplicado, " +
              "aplicar padr√µes de design apropriados e otimizar performance quando poss√≠vel.",
          },
          {
            role: "user",
            content: `Refatore o seguinte c√≥digo com estas instru√ß√µes: ${instructions}\n\n\`\`\`\n${code}\n\`\`\``,
          },
        ],
        temperature: 0.2,
        max_tokens: 1500,
      });

      return `üîÑ **C√≥digo Refatorado**:\n\n${response.choices[0].message.content}`;
    } catch (error: any) {
      console.error("Erro ao refatorar c√≥digo:", error);
      return `Ocorreu um erro ao refatorar o c√≥digo: ${error.message}`;
    }
  }

  /**
   * Processa a a√ß√£o de analisar c√≥digo
   */
  private async handleAnalyze(intent: Intent): Promise<string> {
    let filePath = intent.parameters.path;
    let code = intent.parameters.code;

    // Se o c√≥digo n√£o foi fornecido diretamente e n√£o temos um caminho,
    // verificar se temos um arquivo no contexto
    if (!code && !filePath) {
      const currentFile = this.contextManager.getCurrentFile();
      if (currentFile) {
        filePath = currentFile;
      } else {
        return "Por favor, especifique qual c√≥digo voc√™ gostaria que eu analisasse. Voc√™ pode fornecer o c√≥digo diretamente ou o caminho para um arquivo.";
      }
    }

    // Se temos um caminho, ler o arquivo
    if (filePath && !code) {
      if (!isPathSafe(filePath)) {
        return `‚ö†Ô∏è Acesso negado. O arquivo "${filePath}" √© sens√≠vel ou est√° fora do projeto.`;
      }

      try {
        code = await readFile(filePath);
        if (code === null) {
          return `N√£o consegui encontrar ou ler o arquivo "${filePath}". Por favor, verifique se o caminho est√° correto.`;
        }
      } catch (error: any) {
        return `N√£o foi poss√≠vel ler o arquivo "${filePath}": ${error.message}`;
      }
    }

    if (!code) {
      return "N√£o consegui identificar o c√≥digo a ser analisado. Por favor, forne√ßa o c√≥digo ou especifique um arquivo v√°lido.";
    }

    // Atualizar o estado com a opera√ß√£o atual
    this.contextManager.updateState({
      type: "code",
      action: "analyze",
      parameters: { path: filePath },
      originalMessage: "",
    });

    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4.1",
        messages: [
          {
            role: "system",
            content:
              "Voc√™ √© um assistente especializado em analisar c√≥digo. " +
              "Identifique poss√≠veis problemas, bugs, vulnerabilidades de seguran√ßa " +
              "e padr√µes de c√≥digo que podem ser melhorados. " +
              "Forne√ßa uma an√°lise t√©cnica e objetiva, com recomenda√ß√µes pr√°ticas.",
          },
          {
            role: "user",
            content: `Analise o seguinte c√≥digo e identifique potenciais problemas e melhorias:\n\n\`\`\`\n${code}\n\`\`\``,
          },
        ],
        temperature: 0.2,
        max_tokens: 1500,
      });

      return `üîç **An√°lise de C√≥digo${filePath ? ` em "${filePath}"` : ""}**:\n\n${
        response.choices[0].message.content
      }`;
    } catch (error: any) {
      console.error("Erro ao analisar c√≥digo:", error);
      return `Ocorreu um erro ao analisar o c√≥digo: ${error.message}`;
    }
  }
}
