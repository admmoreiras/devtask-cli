#!/usr/bin/env node

import chalk from "chalk";
import dotenv from "dotenv";
import { Octokit } from "octokit";

// Carregar vari√°veis de ambiente
dotenv.config();

console.log(chalk.blue("üîç Verificando configura√ß√£o GitHub..."));

// Verificar vari√°veis de ambiente
const GITHUB_TOKEN = process.env.GITHUB_TOKEN || "";
const GITHUB_OWNER = process.env.GITHUB_OWNER || "";
const GITHUB_REPO = process.env.GITHUB_REPO || "";

// Tabela para exibir resultados
console.log("\n---------------------------------------");
console.log("| Vari√°vel      | Status             |");
console.log("|---------------|-------------------- |");
console.log(
  `| GITHUB_TOKEN  | ${GITHUB_TOKEN ? chalk.green("‚úÖ Configurado") : chalk.red("‚ùå N√£o encontrado")} ${
    GITHUB_TOKEN ? `(${GITHUB_TOKEN.slice(0, 3)}...${GITHUB_TOKEN.slice(-3)})` : ""
  } |`
);
console.log(
  `| GITHUB_OWNER  | ${GITHUB_OWNER ? chalk.green("‚úÖ Configurado") : chalk.red("‚ùå N√£o encontrado")} ${
    GITHUB_OWNER || ""
  } |`
);
console.log(
  `| GITHUB_REPO   | ${GITHUB_REPO ? chalk.green("‚úÖ Configurado") : chalk.red("‚ùå N√£o encontrado")} ${
    GITHUB_REPO || ""
  } |`
);
console.log("---------------------------------------\n");

// Verificar token apenas se estiver configurado
if (!GITHUB_TOKEN) {
  console.log(chalk.red("‚ùå Token n√£o configurado. Configure o token no arquivo .env"));
  console.log("Exemplo:");
  console.log("GITHUB_TOKEN=ghp_seu_token_aqui");
  process.exit(1);
}

// Verificar owner e repo
if (!GITHUB_OWNER || !GITHUB_REPO) {
  console.log(chalk.red("‚ùå GITHUB_OWNER ou GITHUB_REPO n√£o configurados. Configure no arquivo .env"));
  console.log("Exemplo:");
  console.log("GITHUB_OWNER=seu_usuario_ou_organizacao");
  console.log("GITHUB_REPO=nome_do_repositorio");
  process.exit(1);
}

// Inicializar Octokit
const octokit = new Octokit({
  auth: GITHUB_TOKEN,
});

// Fun√ß√£o principal
async function checkConfig() {
  try {
    // Verificar token
    console.log(chalk.blue("üîí Verificando permiss√µes do token..."));

    const { data: user } = await octokit.rest.users.getAuthenticated();
    console.log(chalk.green(`‚úÖ Token v√°lido! Autenticado como: ${user.login}`));

    // Verificar tipo de conta
    console.log(chalk.blue(`\nüë§ Verificando tipo de conta para ${GITHUB_OWNER}...`));

    try {
      const { data: owner } = await octokit.rest.users.getByUsername({
        username: GITHUB_OWNER,
      });
      console.log(chalk.green(`‚úÖ ${GITHUB_OWNER} √© uma conta de usu√°rio`));
    } catch (error) {
      try {
        const { data: org } = await octokit.rest.orgs.get({
          org: GITHUB_OWNER,
        });
        console.log(chalk.green(`‚úÖ ${GITHUB_OWNER} √© uma organiza√ß√£o`));
      } catch (orgError) {
        console.log(chalk.red(`‚ùå ${GITHUB_OWNER} n√£o √© um usu√°rio ou organiza√ß√£o v√°lido!`));
        process.exit(1);
      }
    }

    // Verificar reposit√≥rio
    console.log(chalk.blue(`\nüìÅ Verificando reposit√≥rio ${GITHUB_OWNER}/${GITHUB_REPO}...`));

    try {
      const { data: repo } = await octokit.rest.repos.get({
        owner: GITHUB_OWNER,
        repo: GITHUB_REPO,
      });
      console.log(chalk.green(`‚úÖ Reposit√≥rio encontrado! (${repo.html_url})`));
    } catch (error) {
      console.log(chalk.red(`‚ùå Reposit√≥rio n√£o encontrado ou sem acesso!`));
      console.log("Verifique:");
      console.log("1. Se o reposit√≥rio existe");
      console.log("2. Se voc√™ tem acesso a ele");
      console.log("3. Se o token tem as permiss√µes necess√°rias");
      process.exit(1);
    }

    // Verificar permiss√µes para projetos
    console.log(chalk.blue("\nüìä Verificando acesso a projetos..."));

    try {
      // Tentar buscar um projeto para testar o acesso
      // Como nem sempre h√° projetos, vamos tentar com GraphQL para verificar permiss√µes
      const query = `
        query {
          viewer {
            login
          }
        }
      `;

      await octokit.graphql(query);
      console.log(chalk.green("‚úÖ Acesso √† API GraphQL est√° funcionando!"));

      // Verificar se o token tem os escopos corretos
      // Nota: Essa verifica√ß√£o √© aproximada, pois o octokit n√£o exp√µe facilmente os escopos
      console.log(chalk.blue("\nüõ°Ô∏è Informa√ß√µes do token:"));

      let hasProjectAccess = false;

      try {
        // Tentar uma opera√ß√£o que requer escopo de projeto
        const projectQuery = `
          query {
            viewer {
              projectsV2(first: 1) {
                totalCount
              }
            }
          }
        `;

        const projectResponse = await octokit.graphql(projectQuery);
        hasProjectAccess = true;
        console.log(chalk.green("‚úÖ Token tem acesso a Projetos V2!"));
      } catch (projectError) {
        console.log(chalk.red("‚ùå Token parece n√£o ter permiss√µes para Projetos V2!"));
        console.log("Recomenda√ß√£o: Use um Personal Access Token (Classic) com escopos:");
        console.log("- repo (acesso completo)");
        console.log("- project (acesso completo)");
        console.log("\nNOTA: Fine-grained tokens podem ter limita√ß√µes com GraphQL e Projetos V2");
      }

      console.log(chalk.blue("\nüèÅ Verifica√ß√£o conclu√≠da!"));

      if (hasProjectAccess) {
        console.log(chalk.green("‚ú® Sua configura√ß√£o parece correta para usar os recursos de projetos!"));
      } else {
        console.log(
          chalk.yellow("‚ö†Ô∏è Sua configura√ß√£o est√° parcialmente correta, mas pode haver problemas com projetos.")
        );
      }
    } catch (error) {
      console.log(chalk.red("‚ùå Erro ao verificar permiss√µes de projetos:"));
      console.log(error.message);
      process.exit(1);
    }
  } catch (error) {
    console.log(chalk.red("‚ùå Erro ao verificar configura√ß√£o:"));
    console.log(error.message);
    process.exit(1);
  }
}

// Executar verifica√ß√£o
checkConfig();
